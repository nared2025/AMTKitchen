import { StyleSheet, Text, View, Alert, Linking, Platform, NativeModules } from 'react-native'
import React, { useEffect, useState} from 'react'
import * as Location from "expo-location"
import * as TaskManager from 'expo-task-manager';
import * as Device from 'expo-device';
import AsyncStorage from '@react-native-async-storage/async-storage';
import LocationService from '../LocationModule';

// ‡∏ä‡∏∑‡πà‡∏≠ task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background location
const BACKGROUND_LOCATION_TASK = 'background-location-task';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö device ID ‡πÄ‡∏Å‡πà‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
const clearDeviceId = async () => {
    try {
        await AsyncStorage.removeItem('unique_device_id');
        console.log('Device ID cleared');
    } catch (error) {
        console.error('Error clearing device ID:', error);
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á device ID ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
const showCurrentDeviceId = async () => {
    try {
        const deviceId = await AsyncStorage.getItem('unique_device_id');
        console.log('Current Device ID:', deviceId);
        return deviceId;
    } catch (error) {
        console.error('Error getting current device ID:', error);
        return null;
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á unique device ID (global scope)
const getUniqueDeviceId = async () => {
    try {
        // ‡πÉ‡∏ä‡πâ AsyncStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö device ID ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
        let deviceId = await AsyncStorage.getItem('unique_device_id');
        
        if (!deviceId) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique ID ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á
            const timestamp = Date.now();
            const random1 = Math.random().toString(36).substring(2, 15);
            const random2 = Math.random().toString(36).substring(2, 15);
            const random3 = Math.random().toString(36).substring(2, 15);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID-like string
            const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            
            // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ unique ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            const deviceInfo = [
                Device.brand || 'unknown',
                Device.model || 'unknown', 
                Device.osInternalBuildId || 'unknown',
                Device.deviceName || 'unknown',
                Device.osVersion || 'unknown',
                Device.platform || 'unknown',
                timestamp.toString(),
                uuid,
                random1,
                random2,
                random3
            ].join('_');
            
            deviceId = deviceInfo;
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å device ID ‡∏•‡∏á AsyncStorage
            await AsyncStorage.setItem('unique_device_id', deviceId);
            console.log('üÜî Created new unique device ID:', deviceId);
        } else {
            console.log('üÜî Using existing device ID:', deviceId);
        }
        
        return deviceId;
    } catch (error) {
        console.error('Error creating unique device ID:', error);
        // fallback ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
        return Device.osInternalBuildId || Device.deviceName || 'unknown_device';
    }
};

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background location tracking - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
TaskManager.defineTask(BACKGROUND_LOCATION_TASK, ({ data, error }) => {
    if (error) {
        console.error('Background location error:', error);
        return;
    }
    
    if (data) {
        const location = data.locations[0]; // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å data
        
        if (!location) {
            console.log("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ location ‡πÉ‡∏ô data");
            return;
        }
        
        console.log('üìç Background location received:', location.coords.latitude, location.coords.longitude);
        
        // ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
        sendLocationToServer(location.coords);
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
const sendLocationToServer = async (coords, attempt = 1) => {
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ device_id) - ‡πÉ‡∏ä‡πâ unique device ID
        const deviceId = await getUniqueDeviceId();

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (UTC+7)
        const thaiTime = new Date();
        const utcTime = thaiTime.getTime() + (thaiTime.getTimezoneOffset() * 60000);
        const thaiTimestamp = new Date(utcTime + (7 * 3600000));

        const locationData = {
            device_id: deviceId, // ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å expo-device)
            latitude: coords.latitude, // ‡∏Ñ‡πà‡∏≤ Latitude
            longitude: coords.longitude, // ‡∏Ñ‡πà‡∏≤ Longitude
            timestamp: thaiTimestamp.toISOString() // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (UTC+7) ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO
        };

        console.log('üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:', coords.latitude, coords.longitude);
        console.log('üìç Device ID:', deviceId);
        console.log('üìç Sending location data:', JSON.stringify(locationData, null, 2));

        // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        const response = await fetch('https://tracking.alliedmetals.com/trackgps/save_location.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(locationData)
        });

        const result = await response.text();
        console.log("üìç Server response:", result);
        console.log("üìç Response status:", response.status);

        if (!response.ok) {
            console.error('‚ùå Failed to send location. Status:', response.status);
            console.error('‚ùå Response text:', result);
            // retry ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢: ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            if (attempt < 3) {
                const nextAttempt = attempt + 1;
                const backoffMs = 3000 * attempt;
                console.log(`‚è≥ Retry sending in ${backoffMs} ms (attempt ${nextAttempt}/3)`);
                setTimeout(() => sendLocationToServer(coords, nextAttempt), backoffMs);
            }
        } else {
            console.log('‚úÖ Location sent successfully');
        }
    } catch (error) {
        console.error('‚ùå Fetch error:', error);
        console.error('‚ùå Error details:', error.message);
        if (attempt < 3) {
            const nextAttempt = attempt + 1;
            const backoffMs = 3000 * attempt;
            console.log(`‚è≥ Retry sending in ${backoffMs} ms (attempt ${nextAttempt}/3)`);
            setTimeout(() => sendLocationToServer(coords, nextAttempt), backoffMs);
        }
    }
};

// Custom hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const useLocation = () => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö error, ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
    const [errorMsg, setErrorMsg] = useState("");
    const [longitude, setLongitude] = useState("");
    const [latitude, setLatitude] = useState("");
    const [isBackgroundLocationActive, setIsBackgroundLocationActive] = useState(false);
    const [deviceInfo, setDeviceInfo] = useState(null);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    const getDeviceInfo = async () => {
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique device ID ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á
            const deviceId = await getUniqueDeviceId();
            setDeviceInfo({ device_id: deviceId });
            console.log('Device ID:', deviceId);
            return deviceId;
        } catch (error) {
            console.error('Error getting device info:', error);
            return 'unknown_device';
        }
    };


    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠ permission ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const getUserLocation = async () => {
        try {
            // Sync device_id ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            await syncDeviceIdToNative();
            
            console.log('üìç Requesting location permissions...');
            
            // ‡∏Ç‡∏≠ permission ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á location foreground
            let {status} = await Location.requestForegroundPermissionsAsync();
            console.log('üìç Foreground permission status:', status);
        
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
            if(status !== 'granted') {
                console.error('‚ùå Foreground location permission not granted');
                setErrorMsg('Permission to location was not granted');
                return;
            }

            // ‡∏Ç‡∏≠ background permission
            let {status: backgroundStatus} = await Location.requestBackgroundPermissionsAsync();
            console.log('üìç Background permission status:', backgroundStatus);
            
            if(backgroundStatus !== 'granted') {
                console.warn('‚ö†Ô∏è Background location permission not granted, but continuing...');
            }

            // ‡∏™‡πà‡∏á last known position ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏ö‡∏π‡∏ï‡πÉ‡∏´‡∏°‡πà/‡∏¢‡∏±‡∏á‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)
            const lastKnown = await Location.getLastKnownPositionAsync();
            if (lastKnown?.coords) {
                try { await sendLocationToServer(lastKnown.coords); } catch {}
            }

            // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (active fix)
            let {coords} = await Location.getCurrentPositionAsync();

            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• coords
            if(coords) {
                const {latitude, longitude} = coords;
                console.log('lat and long is', latitude, longitude);
                setLatitude(latitude);
                setLongitude(longitude);
                
                // ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
                await sendLocationToServer(coords);
                
                // reverse geocode ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å lat long
                let response = await Location.reverseGeocodeAsync({
                    latitude,
                    longitude
                });

                console.log("USER LOCATION IS", response);
            }
        } catch (error) {
            console.error('Error getting user location:', error);
            setErrorMsg('Error getting location: ' + error.message);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sync device_id ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Android Native
    const syncDeviceIdToNative = async () => {
        try {
            if (Platform.OS === 'android') {
                const deviceId = await getUniqueDeviceId();
                console.log('üîÑ Syncing device ID to Native:', deviceId);
                
                // ‡πÉ‡∏ä‡πâ AsyncStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Native ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                await AsyncStorage.setItem('unique_device_id', deviceId);
                console.log('‚úÖ Device ID synced to Native');
            }
        } catch (error) {
            console.error('‚ùå Error syncing device ID to Native:', error);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Battery Optimization
    const requestBatteryOptimizationExemption = async () => {
        try {
            if (Platform.OS === 'android') {
                const { NativeModules } = require('react-native');
                if (NativeModules?.LocationModule?.requestBatteryOptimizationExemption) {
                    const result = await NativeModules.LocationModule.requestBatteryOptimizationExemption();
                    console.log('üîã Battery optimization exemption result:', result);
                    return result;
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Could not request battery optimization exemption:', error);
        }
        return false;
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° background location tracking (‡πÉ‡∏ä‡πâ Native Service)
    const startBackgroundLocation = async () => {
        try {
            // Sync device_id ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° background tracking
            await syncDeviceIdToNative();
            
            if (Platform.OS === 'android') {
                // Android: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ Native ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô Expo
                console.log('üöÄ Starting background location (Android)...');

                // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Battery Optimization ‡∏Å‡πà‡∏≠‡∏ô
                await requestBatteryOptimizationExemption();

                const { status } = await Location.requestBackgroundPermissionsAsync();
                if (status !== 'granted') {
                    console.log('‚ùå Background location permission not granted');
                    setErrorMsg('Background location permission not granted');
                    return false;
                }

                const hasNativeModule = !!NativeModules?.LocationModule;
                if (hasNativeModule) {
                    try {
                        const result = await LocationService.startLocationTracking();
                        console.log('‚úÖ Native location service started:', result);
                        setIsBackgroundLocationActive(true);
                        return true;
                    } catch (nativeErr) {
                        console.warn('‚ö†Ô∏è Native LocationModule failed, falling back to Expo:', nativeErr?.message || nativeErr);
                    }
                } else {
                    console.log('‚ÑπÔ∏è Native LocationModule not found. Using Expo fallback.');
                }

                const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LOCATION_TASK);
                if (!isRegistered) {
                    await Location.startLocationUpdatesAsync(BACKGROUND_LOCATION_TASK, {
                        accuracy: Location.Accuracy.BestForNavigation,
                        timeInterval: 300000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ (5 * 60 * 1000 ms)
                        distanceInterval: 0, // ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏±‡∏ö
                        showsBackgroundLocationIndicator: true,
                        foregroundService: {
                            notificationTitle: 'AMT Kitchen Location',
                            notificationBody: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                            notificationColor: '#3498db'
                        }
                    });
                }

                setIsBackgroundLocationActive(true);
                console.log('‚úÖ Background location tracking started via Expo');
                return true;
            } else {
                // ‡πÉ‡∏ä‡πâ Expo Location ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iOS (fallback)
                console.log('üçé Using Expo Location for iOS...');
                
                const { status } = await Location.requestBackgroundPermissionsAsync();
                if (status !== 'granted') {
                    console.log('‚ùå Background location permission not granted');
                    setErrorMsg('Background location permission not granted');
                    return false;
                }

                console.log('‚úÖ Background location permission granted');

                const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LOCATION_TASK);
                if (isRegistered) {
                    console.log('‚úÖ Background location task already registered');
                    setIsBackgroundLocationActive(true);
                    return true;
                }

                await Location.startLocationUpdatesAsync(BACKGROUND_LOCATION_TASK, {
                    accuracy: Location.Accuracy.BestForNavigation,
                    timeInterval: 300000, // 5 ‡∏ô‡∏≤‡∏ó‡∏µ (5 * 60 * 1000 ms)
                    distanceInterval: 0, // ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏±‡∏ö
                    showsBackgroundLocationIndicator: true,
                    foregroundService: {
                        notificationTitle: 'AMT Kitchen Location',
                        notificationBody: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                        notificationColor: '#3498db'
                    }
                });

                setIsBackgroundLocationActive(true);
                console.log('‚úÖ Background location tracking started successfully');
                return true;
            }
        } catch (error) {
            console.error('‚ùå Error starting background location:', error);
            console.error('‚ùå Error details:', error.message);
            setErrorMsg('Error starting background location: ' + error.message);
            return false;
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î background location tracking
    const stopBackgroundLocation = async () => {
        try {
            if (Platform.OS === 'android') {
                console.log('üõë Stopping background location (Android)...');
                const hasNativeModule = !!NativeModules?.LocationModule;
                if (hasNativeModule) {
                    try {
                        const result = await LocationService.stopLocationTracking();
                        console.log('‚úÖ Native location service stopped:', result);
                        setIsBackgroundLocationActive(false);
                        return;
                    } catch (nativeErr) {
                        console.warn('‚ö†Ô∏è Native stop failed, falling back to Expo:', nativeErr?.message || nativeErr);
                    }
                }

                const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LOCATION_TASK);
                if (isRegistered) {
                    await Location.stopLocationUpdatesAsync(BACKGROUND_LOCATION_TASK);
                }
                setIsBackgroundLocationActive(false);
            } else {
                // ‡πÉ‡∏ä‡πâ Expo Location ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iOS
                const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LOCATION_TASK);
                if (isRegistered) {
                    await Location.stopLocationUpdatesAsync(BACKGROUND_LOCATION_TASK);
                    setIsBackgroundLocationActive(false);
                    console.log('Background location tracking stopped');
                }
            }
        } catch (error) {
            console.error('Error stopping background location:', error);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ background location
    const checkBackgroundLocationStatus = async () => {
        try {
            if (Platform.OS === 'android') {
                const hasNativeModule = !!NativeModules?.LocationModule;
                if (hasNativeModule) {
                    try {
                        const result = await LocationService.isLocationTrackingActive();
                        setIsBackgroundLocationActive(result.isActive);
                        return result.isActive;
                    } catch (nativeErr) {
                        console.warn('‚ö†Ô∏è Native status check failed, using Expo status:', nativeErr?.message || nativeErr);
                    }
                }
                const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LOCATION_TASK);
                setIsBackgroundLocationActive(isRegistered);
                return isRegistered;
            } else {
                // ‡πÉ‡∏ä‡πâ Expo Location ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iOS
                const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_LOCATION_TASK);
                setIsBackgroundLocationActive(isRegistered);
                return isRegistered;
            }
        } catch (error) {
            console.error('Error checking background location status:', error);
            return false;
        }
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å mount
    useEffect(() => {
        const initializeLocation = async () => {
            try {
                console.log('üöÄ Initializing location services...');
                
                await getDeviceInfo();
                console.log('‚úÖ Device info loaded');
                
                await getUserLocation();
                console.log('‚úÖ User location obtained');
                
                await checkBackgroundLocationStatus();
                console.log('‚úÖ Background location status checked');
                
                const backgroundStarted = await startBackgroundLocation();
                if (backgroundStarted) {
                    console.log('‚úÖ Background location started successfully');
                } else {
                    console.log('‚ö†Ô∏è Background location failed to start, but app will continue');
                }
            } catch (error) {
                console.error('‚ùå Error during location initialization:', error);
                setErrorMsg('Error initializing location: ' + error.message);
            }
        };

        initializeLocation();

        // Cleanup function
        return () => {
            console.log('üßπ Cleaning up location services...');
            if (Platform.OS === 'ios') {
                // On iOS, stop background updates when component unmounts
                stopBackgroundLocation();
            }
            // On Android, keep the native Foreground Service running
        };
    }, []);

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
    return {
        latitude, 
        longitude, 
        errorMsg,
        deviceInfo,
        isBackgroundLocationActive,
        startBackgroundLocation,
        stopBackgroundLocation,
        getUserLocation,
        checkBackgroundLocationStatus,
        clearDeviceId,
        showCurrentDeviceId,
        syncDeviceIdToNative,
        requestBatteryOptimizationExemption
    };
};

export default useLocation;

// ‡∏™‡πÑ‡∏ï‡∏•‡πå (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
const styles = StyleSheet.create({});